1.메인 스프링 애플리케이션인 SecurityApplication은 따로 변경하지 않고, SecurityConfig 클래스를 생성합니다.
2.controller 작성
3. SecurityConfig:  
- withUser 부분은 사용자를 추가하는 부분이고 roles는 그 이름으로 된 역할을 부여합니다
.withUser("admin").password(passwordEncoder().encode("1234")).roles("ADMIN")
id : admin, pw : 1234 인 유저에 ADMIN 이라는 역할을 부여한다.
- WebSecurityConfigurerAdapter를 상속받았으므로 configure 메소드를 반드시 오버라이딩 해야 합니다. 
- 주의할 점은 암호를 인코딩하는 부분인 passwordEncoder를 사용하지 않으면 에러를 유발합니다.

  http.authorizeRequests()
  .antMatchers("/adminOnly").hasAuthority("ROLE_ADMIN")
authorizeRequests는 특정 리퀘스트에 권한을 설정합니다.
antMatchers는 특정 URL을 지정합니다. 
hasAuthority는 왼쪽의 antMatchers에 권한을 설정하는데, 
여기서는 "ROLE_ADMIN"이라는 권한을 가진 자들만 접속 가능하게 한다는 뜻입니다. 

 .antMatchers("/**").permitAll() 
antMatcher의 파라미터가 "/**"인 경우 위의 "/adminOnly" URL을 제외한 나머지 모든 URL을 지정한다는 뜻이고, 
permitAll은 접근한 모든 사람(손님 포함)에게 접근을 허용하겠다는 뜻입니다.

  .anyRequest().authenticated()
.anyRequest().authenticated()는 권한별 접속을 활성화시킨다는 의미입니다.

.formLogin().defaultSuccessUrl("/")  
 
formLogin()은 다른 옵션 설정이 없는 경우 시큐리티가 제공하는 기본 로그인 form 페이지 사용
.  defaultSuccessUrl("/")은 로그인 성공시 이동할 URL을 지정하는 곳이며 “/”를 입력한 경우 기본 페이지로 이동합니다.

 .logout().logoutSuccessUrl("/");  
. logoutSuccessUrl은 로그아웃 성공 시 이동할 페이지를 지정합니다.
로그아웃 기본 url은 (/logout)
로 설정하려면 .logoutUrl("url") 사용  

pom.xml에 추가
<dependency>
  <groupId>org.thymeleaf.extras</groupId>
  <artifactId>thymeleaf-extras-springsecurity5</artifactId>
</dependency>

src/main/resources/template/ 폴더 밑에 home.html

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"  
    xmlns:th="http://www.thymeleaf.org"
    xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity4">
<head>
<meta charset="UTF-8">
<title>Select Menu</title>
</head>
<body>
  <a href="test">Test Page</a>
  <a sec:authorize="hasRole('ADMIN')" href="adminOnly">adminOnly Page</a>
  <a sec:authorize="!isAuthenticated()" href="login">Login</a>
  <a sec:authorize="isAuthenticated()" href="logout">Logout</a>
  <p sec:authorize="hasRole('ADMIN')">[이 부분은 운영자(ADMIN)에게만 나타남]</p>
  <p sec:authorize="hasRole('GUEST')">[이 부분은 손님(GUEST)에게만 나타남]</p>
  <p sec:authorize="isAuthenticated()">[이 부분은 로그인한 사용자(isAuthenticated) 모두에게 나타남]<p>
</body>
</html>

isAuthenticated()는 멤버가 로그인 했을 때 true를 반환하고 !를 붙이면 그 반대의 상황(false)에서 true를 반환합니다(!false이므로). 
hasRole('')은 로그인한 멤버가 특정 역할을 가지고 있을 때 true를 반환합니다.
sec:authorize는 th:if 비슷한 역할인데 시큐리티 전용이라고 생각하면 되겠습니다. 
/login, /logout은 스프링 시큐리티에서 기본으로 제공하는 로그인, 로그아웃 URL입니다.

